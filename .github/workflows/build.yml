name: "CI/CD"
on:
    workflow_dispatch: # Allows manual triggering via GitHub UI
    push:
        branches:
            - master
    pull_request:
        paths-ignore:
            - '.txt'
            - 'LICENSE'
            - 'docs/**'
        branches: [ master ]

jobs:
    pre-commit:
        name: Pre-commit check
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout git repository
                uses: actions/checkout@v4.1.6
            -   name: Setup python
                uses: actions/setup-python@v5
                with:
                    python-version: "3.9"
            -   uses: actions/setup-java@v4
                with:
                    distribution: 'temurin'
                    java-version: '21'
            -   name: Pre-commit checks
                uses: pre-commit/action@v3.0.1
            -   name: pre-commit-ci-lite
                uses: pre-commit-ci/lite-action@v1.1.0
                if: always()
    build:
        runs-on: ubuntu-latest
        needs: [ pre-commit ]
        steps:
            -   uses: actions/checkout@v4.1.6
            -   name: Set up JDK 21
                uses: actions/setup-java@v4.2.1
                with:
                    distribution: 'temurin'
                    java-version: 21
                    architecture: x64
                    cache: 'maven'
            -   name: Build with Maven
                run: mvn --no-transfer-progress verify

            -   name: SonarCloud Scan
                uses: SonarSource/sonarcloud-github-action@master
                env:
                    # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            # Set up Docker Buildx
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2

            # Log in to DockerHub
            -   name: Log in to DockerHub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            # Build the Docker image
            -   name: Build Docker Image
                run: |
                    docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/log8100-projet:latest .

            # Push the Docker image to DockerHub
            -   name: Push Docker Image
                run: |
                    docker push ${{ secrets.DOCKERHUB_USERNAME }}/log8100-projet:latest

    scan:
        name: Vulnerability Scanning
        runs-on: ubuntu-latest
        needs: [ build ]
        steps:
            -   uses: actions/checkout@v4.1.6
            -   name: Log in to DockerHub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            -   name: Cache Trivy DB
                uses: actions/cache@v4
                with:
                    path: ~/.cache/trivy
                    key: trivy-db-${{ runner.os }}-${{ github.sha }}
                    restore-keys: triy-db-${{ runner.os }}-

            -   name: Run Trivy Scan
                uses: aquasecurity/trivy-action@master
                with:
                    image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/log8100-projet:latest
                    format: sarif
                    output: trivy-report.sarif
                    timeout: 30m

            -   name: Upload Trivy Report
                uses: actions/upload-artifact@v3
                with:
                    name: trivy-report
                    path: trivy-report.sarif

    # minikube en local pour l'instant, aks prob à revoir si non possible prof donne accès pour déployer sur son serveur
    # deploy:
    #     runs-on: ubuntu-latest
    #     # needs: [ build ]
    #     steps:
    #         -   name: Checkout code
    #             uses: actions/checkout@v3

    #         -   name: Set up Terraform
    #             uses: hashicorp/setup-terraform@v2
    #             with:
    #                 terraform_version: 1.5.0

    #         -   uses: azure/login@v2
    #             with:
    #                 client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #                 tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #                 subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    #         -   name: Initialize Terraform
    #             run: terraform init

            # -   name: Apply Terraform Configuration
            #     run: terraform apply -auto-approve

            # -   name: Get AKS credentials
            #     run: az aks get-credentials --resource-group rg-k8s-demo --name aks-cluster

            # -   name: Deploy Kubernetes Resources
            #     run: |
            #         kubectl apply -f k8s-deployment.yaml
            #         kubectl apply -f k8s-ingress.yaml
